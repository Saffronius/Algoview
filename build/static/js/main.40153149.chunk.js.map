{"version":3,"sources":["logo.svg","sortingAlgorithms/mergeSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/quickSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getbubbleSortAnimations","n","swap","bubbleSort","firstIndex","secondIndex","temp","getquickSortAnimations","auxillaryArray","quickSort","startIndex","endIndex","pivotIndex","pivot","partitionArray","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","insertionSort","getinsertionSortAnimations","className","map","value","idx","key","onClick","mergeSort","sortedArray","min","max","random","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40153149.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) {\r\n    return array;\r\n  }\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx == endIdx) {\r\n    return;\r\n  }\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    //these values that are we are comparing;\r\n    //we push them once to change the colour\r\n    animations.push([i, j]);\r\n    //these are the values that we are comparing\r\n    //we push them second time to revert their colour\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      //we overwrite the value at index k in original array\r\n      // with value at index i in the auxilliary array\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    //these are values aren't for comparing we push to change the color\r\n    animations.push([i, i]);\r\n    //these are values aren't for comparing we push to revert color\r\n    animations.push([i, i]);\r\n    //we overwrte the value at index k\r\n    //with the value at i in the auxilliary array\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    //these are values aren't for comparing we push to change the color\r\n    animations.push([j, j]);\r\n    //these are values aren't for comparing we push to revert color\r\n    animations.push([j, j]);\r\n    //we overwrte the value at index k\r\n    //with the value at i in the auxilliary array\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getbubbleSortAnimations(array) {\r\n  const animations = [];\r\n  const auxiliaryArray = array.slice();\r\n  bubbleSort(auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(auxiliaryArray, animations) {\r\n  const n = auxiliaryArray.length;\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      //these values that we are comparing\r\n      //we push them once to change the colour\r\n      animations.push([j, j + 1]);\r\n      //these are the values that we are comparing\r\n      //we push them second time to revert their colour\r\n      animations.push([j, j + 1]);\r\n      if (auxiliaryArray[j] > auxiliaryArray[j + 1]) {\r\n        //we overwrite the value at index j in original array\r\n        //with value in auxiliary array at j+1\r\n        animations.push([j, auxiliaryArray[j + 1]]);\r\n        //we overwrite the value at index j+1 in original array\r\n        //with value in auxiliary array at j\r\n        animations.push([j + 1, auxiliaryArray[j]]);\r\n        swap(auxiliaryArray, j, j + 1);\r\n      } else {\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction swap(auxiliaryArray, firstIndex, secondIndex) {\r\n  let temp = auxiliaryArray[firstIndex];\r\n  auxiliaryArray[firstIndex] = auxiliaryArray[secondIndex];\r\n  auxiliaryArray[secondIndex] = temp;\r\n}\r\n","export function getquickSortAnimations(array) {\r\n  const animations = [];\r\n  const auxillaryArray = array.slice();\r\n  quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n  let pivotIndex;\r\n  if (startIndex < endIndex) {\r\n    pivotIndex = partitionArray(\r\n      auxillaryArray,\r\n      startIndex,\r\n      endIndex,\r\n      animations\r\n    );\r\n    quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n    quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n  }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n  let pivot = auxillaryArray[endIndex];\r\n  let pivotIndex = startIndex;\r\n  for (let i = startIndex; i <= endIndex - 1; i++) {\r\n    animations.push([i, endIndex]);\r\n    animations.push([i, endIndex]);\r\n    if (auxillaryArray[i] <= pivot) {\r\n      //Swap these two heights\r\n      animations.push([i, auxillaryArray[pivotIndex]]);\r\n      animations.push([pivotIndex, auxillaryArray[i]]);\r\n      swap(auxillaryArray, i, pivotIndex);\r\n      pivotIndex++;\r\n    } else {\r\n      animations.push([-1, -1]);\r\n      animations.push([-1, -1]);\r\n    }\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n  }\r\n  animations.push([-1, -1]);\r\n  animations.push([-1, -1]);\r\n  animations.push([-1, -1]);\r\n  animations.push([-1, -1]);\r\n  //Swap these two heights\r\n  animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n  animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n  swap(auxillaryArray, pivotIndex, endIndex);\r\n  return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n  let temp = auxillaryArray[firstIndex];\r\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n  auxillaryArray[secondIndex] = temp;\r\n}\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/mergeSort\";\r\nimport { getinsertionSortAnimations } from \"../sortingAlgorithms/insertionSort\";\r\nimport { getbubbleSortAnimations } from \"../sortingAlgorithms/bubbleSort\";\r\nimport { getquickSortAnimations } from \"../sortingAlgorithms/quickSort\";\r\n\r\n//change the value for speed of animations\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n//change this value for the number of bars (value) in the array\r\nconst NUMBER_OF_ARRAY_BARS = 300;\r\n\r\n//change this main color of array bars\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n//This the color of array bars when being compared\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\n//This the colour of the array bars once sorted\r\nconst SORTED_COLOR = \"green\";\r\n\r\n//This the colour of the array bars once sorted\r\nconst UNTOUCHED_COLOR = \"black\";\r\n\r\nclass SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(this.randomIntFromInterval(5, 600));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  //needs testing\r\n  /* sortedArray(animations) {\r\n    const sorted_array = this.state.array.slice().sort((a, b) => a - b);\r\n    //sorted_array.sort();\r\n    for (let i = 0; i < sorted_array.length; i++) {\r\n      console.log(sorted_array[i]);\r\n    }\r\n    for (let i = 0; i < sorted_array.length; i++) {\r\n      if (animations[i] !== sorted_array[i]) {\r\n        return false;\r\n        break;\r\n      }\r\n      return true;\r\n    }\r\n  }*/\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n      /* if (this.sortedArray(animations)) {\r\n        //const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        // for (let i = 0; i < animations.length; i++) {\r\n        // arrayBars[i].style.backgroundColor = SORTED_COLOR;\r\n        //}\r\n        console.log(this.sortedArray(animations));\r\n      }\r\n    }\r\n    {\r\n      /* // changing the colour once sorted\r\n    const sorted_array = this.state.array;\r\n    //sorted_array.sort();\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < sorted_array.length; i++) {\r\n      //if (sorted_array[i] === animations[i])\r\n      arrayBars[i].style.backgroundColor = UNTOUCHED_COLOR;\r\n    }\r\n    {\r\n      //changing color once sorted\r\n    const sorted_array = this.state.array.slice().sort((a, b) => a - b);\r\n    // if (animations[i] === sorted_array[i]) {\r\n    // const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (animations[i] === sorted_array[i]) {\r\n        arrayBars.style.backgroundColor = SORTED_COLOR;\r\n      }\r\n    }\r\n    }*/\r\n    }\r\n  }\r\n  bubbleSort() {\r\n    const animations = getbubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange) {\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = getquickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length - 1; i++) {\r\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        if (barOneIndex === -1) {\r\n          continue;\r\n        }\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    /*const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < animations.length; i++) {\r\n      //if (sorted_array[i] === animations[i])\r\n      arrayBars[i].style.backgroundColor = UNTOUCHED_COLOR;\r\n    }*/\r\n  }\r\n  insertionSort() {\r\n    const animations = getinsertionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparision1\" ||\r\n        animations[i][0] === \"comparision2\";\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange) {\r\n        const color =\r\n          animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [temp, barIndex, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{ backgroundColor: PRIMARY_COLOR, height: `${value}px` }}\r\n          ></div>\r\n        ))}\r\n        <div className=\"buttons\">\r\n          <button className=\"btn-reset\" onClick={() => this.resetArray()}>\r\n            Generate New Array\r\n          </button>\r\n          <button className=\"btn-merge\" onClick={() => this.mergeSort()}>\r\n            Merge Sort\r\n          </button>\r\n          <button className=\"btn-bubble\" onClick={() => this.bubbleSort()}>\r\n            Bubble Sort\r\n          </button>\r\n          <button className=\"btn-quick\" onClick={() => this.quickSort()}>\r\n            Quick Sort\r\n          </button>\r\n          <button\r\n            className=\"btn-insertion\"\r\n            onClick={() => this.insertionSort()}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button className=\"btn-insertion\" onClick={() => this.sortedArray()}>\r\n            console\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //credits stack overflow\r\n  randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  /*function arraysAreEqual(arrayOne,arrayTwo)\r\n{\r\n    if(arrayOne.lenght !== arrayTwo.lenght)\r\n    return false;\r\n    for(let i=0;i<arrayOne.lenghtl;i++)\r\n    {\r\n        if(arrayOne[i]!==arrayTwo[i])\r\n        return false;\r\n    }\r\n    return true;\r\n}*/\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","export function getinsertionSortAnimations(array) {\r\n  const animations = [];\r\n  const auxillaryArray = array.slice();\r\n  insertionSort(auxillaryArray, animations);\r\n  array = auxillaryArray;\r\n  return animations;\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n  const n = auxillaryArray.length;\r\n  for (let i = 1; i < n; i++) {\r\n    let temp = auxillaryArray[i];\r\n    let j = i - 1;\r\n    //these values that are we are comparing;\r\n    //we push them once to change the colour\r\n    animations.push([\"comparision1\", j, i]);\r\n    //these are the values that we are comparing\r\n    //we push them second time to revert their colour\r\n    animations.push([\"comparision2\", j, i]);\r\n    while (j >= 0 && auxillaryArray[j] > temp) {\r\n      //we overwrite the value in index j+1 in original array\r\n      animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n      auxillaryArray[j + 1] = auxillaryArray[j];\r\n      j = j - 1;\r\n      if (j >= 0) {\r\n        //this is not for comparing, we push to change the colour\r\n        animations.push([\"comparision1\", j, i]);\r\n        //this is not for comparing, we push to revert colour\r\n        animations.push([\"comparision2\", j, i]);\r\n      }\r\n    }\r\n    //we overwrite the value at index j+1\r\n    animations.push([\"overwrite\", j + 1, temp]);\r\n    auxillaryArray[j + 1] = temp;\r\n  }\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}